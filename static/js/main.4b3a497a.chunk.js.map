{"version":3,"sources":["components/Buttons.js","components/LineChart.js","App.js","registerServiceWorker.js","index.js"],"names":["pairs","Buttons","onChangePair","buttonList","map","pair","key","onClick","className","LineChart","chart","this","destroy","props","data","config","type","labels","d","date","datasets","label","value","fill","backgroundColor","borderColor","lineTension","pointRadius","options","responsive","title","display","text","tooltips","mode","intersect","hover","ctx","canvas","getContext","Chart","draw","prevProps","prevState","ref","Component","App","state","handleChangePair","setState","getData","a","axios","get","response","candle","moment","format","reverse","console","log","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4b3a497a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Buttons.css';\r\n\r\nconst pairs = ['BTCUSD', 'ETHUSD', 'XRPUSD'];\r\n\r\nconst Buttons = ({ onChangePair }) => {\r\n    const buttonList = pairs.map(\r\n        pair => (<button key={pair} onClick={() => onChangePair(pair)}>{pair}</button>)\r\n    );\r\n\r\n    return(\r\n        <div className=\"Buttons\">\r\n            { buttonList }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React, { Component } from 'react';\r\nimport Chart from \"chart.js\";\r\nimport \"./LineChart.css\";\r\n\r\nclass LineChart extends Component {\r\n\r\n    chart = null;\r\n\r\n    draw() {\r\n        // 새로 그려질 때 기존 인스턴스 제거\r\n        if (this.chart) {\r\n            this.chart.destroy();\r\n            this.chart = null;\r\n        }\r\n\r\n        const { data, pair } = this.props;\r\n\r\n        const config = {\r\n            type: \"line\",\r\n            data: {\r\n                labels: data.map(d => d.date),\r\n                datasets: [\r\n                    {\r\n                        label: \"price\",\r\n                        data: data.map(d => d.value),\r\n                        fill: false,\r\n                        backgroundColor: 'blue',\r\n                        borderColor: 'blue',\r\n                        lineTension: 0,\r\n                        pointRadius: 0,\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                title: {\r\n                    display: true,\r\n                    text: `${pair} 24hr Chart`\r\n                },\r\n                tooltips: {\r\n                    mode: \"index\",\r\n                    intersect: false\r\n                },\r\n                hover: {\r\n                    mode: \"nearest\",\r\n                    intersect: true\r\n                }\r\n            }\r\n        };\r\n\r\n        const ctx = this.canvas.getContext(\"2d\");\r\n        this.chart = new Chart(ctx, config);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.draw();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.data !== this.props.data) {\r\n            this.draw();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // 컴포넌트가 사라질 때 인스턴스 제거\r\n        if (this.chart) {\r\n            this.chart.destroy();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"LineChart\">\r\n                {/* ref 를 통해서 실제 DOM 에 대한 접근 */}\r\n                <canvas ref={ref => (this.canvas = ref)} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LineChart;","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nimport Buttons from './components/Buttons';\r\nimport LineChart from './components/LineChart';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        pair: 'BTCUSD',\r\n        data: []\r\n    }\r\n\r\n    handleChangePair = (pair) => {\r\n        // pair 값을 바꾸는 함수\r\n        this.setState({ pair });\r\n    }\r\n\r\n    getData = async () => {\r\n        const { pair } = this.state;\r\n        try {\r\n            // API 호출하고\r\n            const response = await axios.get(`https://api.bitfinex.com/v2/candles/trade:5m:t${pair}/hist?limit=288`)\r\n            // 데이터는 다음과 같은 형식인데,\r\n            /* [ MTS, OPEN, CLOSE, HIGH, LOW, VOLUME ] */\r\n            const data = response.data.map(\r\n                // 필요한 값만 추출해서 날짜, 값이 들어있는 객체 생성\r\n                (candle) => ({\r\n                    data: moment(candle[0]).format('LT'), // 시간만 나타나도록 설정\r\n                    value: candle[2]\r\n                })\r\n            ).reverse(); // 역순으로 받아오게 되므로 순서를 반대로 소팅\r\n            this.setState({\r\n                data\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // 첫 로딩시에 getData 호출\r\n        this.getData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // pair 값이 바뀌면, getData 호출\r\n        if (prevState.pair !== this.state.pair) {\r\n            this.getData();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"App\">\r\n                <Buttons onChangePair={this.handleChangePair} />\r\n                { /* 데이터가 없으면 렌더링하지 않음 */ }\r\n                { this.state.data.length > 0 && <LineChart data={this.state.data} pair={this.state.pair}/> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}